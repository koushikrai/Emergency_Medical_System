Great! Let’s integrate **Google Maps API** into your backend to handle geocoding (convert addresses to coordinates), finding nearby hospitals, and getting directions (shortest path). Here's how to proceed:

---

### **Step 1: Enable Google Maps API Services**
1. Visit the [Google Cloud Console](https://console.cloud.google.com/).
2. Create a new project or select an existing one.
3. Enable the following APIs:
   - **Geocoding API**: To convert addresses to latitude/longitude.
   - **Places API**: To find nearby hospitals.
   - **Directions API**: To calculate routes and distances.
4. Generate an API key:
   - Go to **APIs & Services > Credentials**.
   - Create an API key and restrict it to the enabled services.
5. Add the API key to your `.env` file:
   ```env
   GOOGLE_MAPS_API_KEY=your_api_key_here
   ```

---

### **Step 2: Create a Service for Google Maps Integration**
In your `backend/services/` folder, create a file named `googleMapsService.js` to encapsulate all API interactions.

#### **`googleMapsService.js`**
```javascript
const axios = require('axios');

const googleMapsAPI = process.env.GOOGLE_MAPS_API_KEY;

async function geocodeAddress(address) {
    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${googleMapsAPI}`;
    const response = await axios.get(url);
    if (response.data.status !== 'OK') {
        throw new Error(`Geocoding failed: ${response.data.status}`);
    }
    return response.data.results[0].geometry.location; // { lat, lng }
}

async function findNearbyHospitals(lat, lng) {
    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=5000&type=hospital&key=${googleMapsAPI}`;
    const response = await axios.get(url);
    if (response.data.status !== 'OK') {
        throw new Error(`Places API failed: ${response.data.status}`);
    }
    return response.data.results; // List of hospitals
}

async function getDirections(origin, destinationPlaceId) {
    const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin.lat},${origin.lng}&destination=place_id:${destinationPlaceId}&key=${googleMapsAPI}`;
    const response = await axios.get(url);
    if (response.data.status !== 'OK') {
        throw new Error(`Directions API failed: ${response.data.status}`);
    }
    return response.data.routes[0]; // Route information
}

module.exports = { geocodeAddress, findNearbyHospitals, getDirections };
```

---

### **Step 3: Integrate Services into the Emergency Controller**
In your `backend/controllers/`, create `emergencyController.js` to handle the logic for emergencies.

#### **`emergencyController.js`**
```javascript
const { geocodeAddress, findNearbyHospitals, getDirections } = require('../services/googleMapsService');

async function handleEmergency(req, res) {
    const { address, details } = req.body;

    try {
        // Step 1: Geocode the address
        const location = await geocodeAddress(address);
        console.log('Geocoded location:', location);

        // Step 2: Find nearby hospitals
        const hospitals = await findNearbyHospitals(location.lat, location.lng);
        if (hospitals.length === 0) {
            return res.status(404).json({ message: 'No hospitals found nearby.' });
        }
        const nearestHospital = hospitals[0];

        // Step 3: Get directions to the nearest hospital
        const route = await getDirections(location, nearestHospital.place_id);

        // Step 4: Respond with all information
        res.json({
            emergencyDetails: { address, details },
            emergencyLocation: location,
            nearestHospital: {
                name: nearestHospital.name,
                address: nearestHospital.vicinity,
                location: nearestHospital.geometry.location,
            },
            route,
        });
    } catch (error) {
        console.error('Error handling emergency:', error);
        res.status(500).json({ message: error.message });
    }
}

module.exports = { handleEmergency };
```

---

### **Step 4: Define API Routes**
In your `backend/routes/`, create `emergencyRoutes.js` to handle routing.

#### **`emergencyRoutes.js`**
```javascript
const express = require('express');
const { handleEmergency } = require('../controllers/emergencyController');

const router = express.Router();

// Route to handle emergencies
router.post('/', handleEmergency);

module.exports = router;
```

---

### **Step 5: Update Frontend to Display Results**
1. Modify **`EmergencyForm.jsx`** to handle responses from the backend:
   ```javascript
   import { useState } from 'react';
   import axios from 'axios';

   export default function EmergencyForm() {
       const [formData, setFormData] = useState({ address: '', details: '' });
       const [response, setResponse] = useState(null);

       const handleSubmit = async (e) => {
           e.preventDefault();
           try {
               const res = await axios.post('http://localhost:3001/api/emergency', formData);
               setResponse(res.data);
           } catch (err) {
               console.error('Error submitting emergency:', err);
           }
       };

       return (
           <div>
               <form onSubmit={handleSubmit}>
                   <input
                       type="text"
                       placeholder="Enter address"
                       value={formData.address}
                       onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                   />
                   <textarea
                       placeholder="Enter emergency details"
                       value={formData.details}
                       onChange={(e) => setFormData({ ...formData, details: e.target.value })}
                   ></textarea>
                   <button type="submit">Submit Emergency</button>
               </form>

               {response && (
                   <div>
                       <h3>Nearest Hospital: {response.nearestHospital.name}</h3>
                       <p>Address: {response.nearestHospital.address}</p>
                       <p>Route: Check console for detailed route info.</p>
                   </div>
               )}
           </div>
       );
   }
   ```

---

### **Step 6: Testing**
1. Start the backend:
   ```bash
   cd backend
   npm run start
   ```
2. Start the frontend:
   ```bash
   cd ../frontend
   npm run dev
   ```
3. Submit an emergency in the form with a real address.
4. Check the console for geocoding results, hospitals, and directions.

---

This setup ensures your backend processes the request and integrates with Google Maps APIs seamlessly. Let me know if you’d like to refine any part or add features like caching or advanced error handling!