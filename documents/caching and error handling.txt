Letâ€™s enhance your Emergency Medical System with **caching** to improve performance and **advanced error handling** for a more robust backend.

---

### **1. Adding Caching**
Caching frequently used data like hospital locations or geocoded addresses can significantly reduce API requests and improve performance.

#### **Install Cache Middleware**
Use the `node-cache` package for simple in-memory caching:
```bash
npm install node-cache
```

#### **Update `googleMapsService.js` to Include Caching**
Wrap API calls with caching logic.

```javascript
const NodeCache = require('node-cache');
const axios = require('axios');

const cache = new NodeCache({ stdTTL: 600 }); // Cache items for 10 minutes
const googleMapsAPI = process.env.GOOGLE_MAPS_API_KEY;

async function geocodeAddress(address) {
    const cacheKey = `geocode-${address}`;
    if (cache.has(cacheKey)) {
        return cache.get(cacheKey);
    }

    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${googleMapsAPI}`;
    const response = await axios.get(url);

    if (response.data.status !== 'OK') {
        throw new Error(`Geocoding failed: ${response.data.status}`);
    }

    const location = response.data.results[0].geometry.location;
    cache.set(cacheKey, location); // Store result in cache
    return location;
}

async function findNearbyHospitals(lat, lng) {
    const cacheKey = `hospitals-${lat}-${lng}`;
    if (cache.has(cacheKey)) {
        return cache.get(cacheKey);
    }

    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=5000&type=hospital&key=${googleMapsAPI}`;
    const response = await axios.get(url);

    if (response.data.status !== 'OK') {
        throw new Error(`Places API failed: ${response.data.status}`);
    }

    const hospitals = response.data.results;
    cache.set(cacheKey, hospitals); // Store result in cache
    return hospitals;
}

async function getDirections(origin, destinationPlaceId) {
    const cacheKey = `directions-${origin.lat}-${origin.lng}-${destinationPlaceId}`;
    if (cache.has(cacheKey)) {
        return cache.get(cacheKey);
    }

    const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin.lat},${origin.lng}&destination=place_id:${destinationPlaceId}&key=${googleMapsAPI}`;
    const response = await axios.get(url);

    if (response.data.status !== 'OK') {
        throw new Error(`Directions API failed: ${response.data.status}`);
    }

    const route = response.data.routes[0];
    cache.set(cacheKey, route); // Store result in cache
    return route;
}

module.exports = { geocodeAddress, findNearbyHospitals, getDirections };
```

---

### **2. Adding Advanced Error Handling**
Proper error handling ensures meaningful feedback for users and easier debugging for developers.

#### **Middleware for Error Handling**
Create a global error handler in `app.js`:
```javascript
app.use((err, req, res, next) => {
    console.error('Error Stack:', err.stack);
    res.status(err.status || 500).json({
        message: err.message || 'Internal Server Error',
        details: err.details || 'An unexpected error occurred.',
    });
});
```

#### **Update the Controller**
Add specific error responses and validations in `emergencyController.js`:
```javascript
const { geocodeAddress, findNearbyHospitals, getDirections } = require('../services/googleMapsService');

async function handleEmergency(req, res, next) {
    const { address, details } = req.body;

    if (!address || !details) {
        return res.status(400).json({ message: 'Address and details are required.' });
    }

    try {
        // Step 1: Geocode the address
        const location = await geocodeAddress(address);

        // Step 2: Find nearby hospitals
        const hospitals = await findNearbyHospitals(location.lat, location.lng);
        if (hospitals.length === 0) {
            return res.status(404).json({ message: 'No hospitals found nearby.' });
        }
        const nearestHospital = hospitals[0];

        // Step 3: Get directions to the nearest hospital
        const route = await getDirections(location, nearestHospital.place_id);

        // Step 4: Respond with all information
        res.json({
            emergencyDetails: { address, details },
            emergencyLocation: location,
            nearestHospital: {
                name: nearestHospital.name,
                address: nearestHospital.vicinity,
                location: nearestHospital.geometry.location,
            },
            route,
        });
    } catch (error) {
        next(error); // Pass errors to the global error handler
    }
}

module.exports = { handleEmergency };
```

---

### **3. Logging for Error Tracking**
Use the `winston` package for structured logging:
```bash
npm install winston
```

#### **Set Up Logger**
Create `logger.js` in the backend root:
```javascript
const winston = require('winston');

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    ],
});

module.exports = logger;
```

#### **Use Logger in Middleware and Services**
Log errors instead of console logging:
```javascript
const logger = require('../logger');

app.use((err, req, res, next) => {
    logger.error({
        message: err.message,
        stack: err.stack,
        details: err.details,
    });
    res.status(err.status || 500).json({
        message: err.message || 'Internal Server Error',
    });
});
```

---

### **4. Testing Enhancements**
#### **Caching Test**
1. Send a request to geocode the same address multiple times.
2. Check logs or console for a single API call; subsequent calls should fetch results from the cache.

#### **Error Handling Test**
1. Send incomplete data (e.g., omit `address` in the request).
2. Simulate API failure by providing an invalid Google Maps API key.
3. Verify appropriate error responses are returned.

#### **Logging Test**
1. Trigger errors deliberately.
2. Check `logs/error.log` for detailed error information.

---

### **5. Potential Next Steps**
- Add **rate limiting** (using packages like `express-rate-limit`) to prevent abuse.
- Implement **Redis** for distributed caching if scaling is required.
- Include **email notifications** for critical errors (e.g., server crashes).

This setup significantly improves your project's performance, resilience, and debugging capabilities. Let me know if youâ€™d like to implement any additional features! ðŸš€